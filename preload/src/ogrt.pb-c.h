/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ogrt-protocol/ogrt.proto */

#ifndef PROTOBUF_C_ogrt_2dprotocol_2fogrt_2eproto__INCLUDED
#define PROTOBUF_C_ogrt_2dprotocol_2fogrt_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _OGRT__Fork OGRT__Fork;
typedef struct _OGRT__Execve OGRT__Execve;


/* --- enums --- */

typedef enum _OGRT__MessageType {
  OGRT__MESSAGE_TYPE__ForkMsg = 100,
  OGRT__MESSAGE_TYPE__ExecveMsg = 101
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OGRT__MESSAGE_TYPE)
} OGRT__MessageType;

/* --- messages --- */

struct  _OGRT__Fork
{
  ProtobufCMessage base;
  char *hostname;
  int32_t parent_pid;
  int32_t child_pid;
  char *name;
};
#define OGRT__FORK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ogrt__fork__descriptor) \
    , NULL, 0, 0, NULL }


struct  _OGRT__Execve
{
  ProtobufCMessage base;
  char *hostname;
  int32_t pid;
  int32_t parent_pid;
  char *filename;
  size_t n_arguments;
  char **arguments;
  size_t n_environment_variables;
  char **environment_variables;
  char *uuid;
};
#define OGRT__EXECVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ogrt__execve__descriptor) \
    , NULL, 0, 0, NULL, 0,NULL, 0,NULL, NULL }


/* OGRT__Fork methods */
void   ogrt__fork__init
                     (OGRT__Fork         *message);
size_t ogrt__fork__get_packed_size
                     (const OGRT__Fork   *message);
size_t ogrt__fork__pack
                     (const OGRT__Fork   *message,
                      uint8_t             *out);
size_t ogrt__fork__pack_to_buffer
                     (const OGRT__Fork   *message,
                      ProtobufCBuffer     *buffer);
OGRT__Fork *
       ogrt__fork__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ogrt__fork__free_unpacked
                     (OGRT__Fork *message,
                      ProtobufCAllocator *allocator);
/* OGRT__Execve methods */
void   ogrt__execve__init
                     (OGRT__Execve         *message);
size_t ogrt__execve__get_packed_size
                     (const OGRT__Execve   *message);
size_t ogrt__execve__pack
                     (const OGRT__Execve   *message,
                      uint8_t             *out);
size_t ogrt__execve__pack_to_buffer
                     (const OGRT__Execve   *message,
                      ProtobufCBuffer     *buffer);
OGRT__Execve *
       ogrt__execve__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ogrt__execve__free_unpacked
                     (OGRT__Execve *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*OGRT__Fork_Closure)
                 (const OGRT__Fork *message,
                  void *closure_data);
typedef void (*OGRT__Execve_Closure)
                 (const OGRT__Execve *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ogrt__message_type__descriptor;
extern const ProtobufCMessageDescriptor ogrt__fork__descriptor;
extern const ProtobufCMessageDescriptor ogrt__execve__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ogrt_2dprotocol_2fogrt_2eproto__INCLUDED */
